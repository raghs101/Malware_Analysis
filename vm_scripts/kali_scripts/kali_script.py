import sys
import subprocess
import re
import psutil
import pickle
from graphviz import Digraph

def trace_script_and_save_graph(script_path, dat_file_path):

        # Run the strace command to trace system calls
        strace_command = f'sudo strace -f -o out.txt ./{script_path}'
        subprocess.run(strace_command, shell=True, check=True)

        with open("out.txt", "r") as f:
            trace_output = f.read()
            access_calls = re.findall(r'access\(.*\)', trace_output)
            open_call = re.findall(r'openat\(.*\)', trace_output)
            mkdir_call = re.findall(r'mkdir\(.*\)', trace_output)
            with open("lolo.dat", "wb") as f:
                l = [access_calls, open_call, mkdir_call]
                pickle.dump(l, f)

        # Get the main process ID without using psutil.Popen
        main_process = psutil.Process()
        main_process_cmdline = main_process.cmdline()
        print(f"Command line of the main process: {main_process_cmdline}")

        # Draw the process tree
        dot = draw_process_tree(main_process.pid)

        # Save the graph data to a DAT file using pickle
        with open(dat_file_path, 'wb') as dat_file:
            pickle.dump(dot, dat_file)



def draw_process_tree(pid, dot=None):
    if dot is None:
        dot = Digraph(comment='Process Tree')

    try:
        process = psutil.Process(pid)
        dot.node(str(pid), process.name())

        for child in process.children():
            child_pid = child.pid
            dot.node(str(child_pid), child.name())
            dot.edge(str(pid), str(child_pid))
            draw_process_tree(child_pid, dot)

    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        pass

    return dot

if __name__ == "__main__":
    # Replace 'your_script.sh' with the path to your Bash script
    executable_name = sys.argv[1]
    dat_file_path = 'process_tree.dat'
    trace_script_and_save_graph(executable_name, dat_file_path)
