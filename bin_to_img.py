import numpy as np
import cv2
import matplotlib.pyplot as plt

def binary_to_matrix(binary_data, rows, cols):
    # Convert binary data to a NumPy array of unsigned integers
    pixel_values = np.frombuffer(binary_data, dtype=np.uint8)
    
    # Reshape the 1D array into a 2D array with dimensions rows x cols
    matrix = pixel_values.reshape((rows, cols))
    
    return matrix

def visualize_matrix(matrix):
    # Display the grayscale image
    plt.imshow(matrix, cmap='gray', vmin=0, vmax=255)
    plt.axis('off')
    plt.show()

# Example usage:
# Replace 'your_malware_binary_data' with the actual binary data you have
# Make sure the length of the binary data is compatible with the desired matrix dimensions
binary_file_path = 'timing.bin'
with open(binary_file_path, 'rb') as binary_file:
    binary_data = binary_file.read()

# Define the matrix dimensions (rows x cols)
matrix_rows, matrix_cols = 32, 32

# Repeat the binary data to fill the matrix
repeated_binary_data = np.tile(binary_data, matrix_rows * matrix_cols // len(binary_data) + 1)

# Take only the required amount of data
your_malware_binary_data = repeated_binary_data[:matrix_rows * matrix_cols]

# Convert binary data to a matrix
malware_matrix = binary_to_matrix(your_malware_binary_data, matrix_rows, matrix_cols)

# Visualize the matrix as a grayscale image
visualize_matrix(malware_matrix)

# # Step 1: Read the binary file


# # Step 2: Convert binary data to an 8-bit vector
# eight_bit_vector = np.frombuffer(binary_data, dtype=np.uint8)

# # Step 3: Reshape the vector into a 2D array (assuming the data represents an image)
# # Adjust the shape according to the dimensions of your image
# image_shape = (32, 32)  # Replace with the actual dimensions of your image
# eight_bit_image = eight_bit_vector.reshape(image_shape)

# # Step 4: Display or save the grayscale image
# cv2.imshow('Grayscale Image', eight_bit_image)
# cv2.waitKey(0)
# cv2.destroyAllWindows()

# # If you want to save the image to a file
# output_image_path = 'bin_im.png'
# cv2.imwrite(output_image_path, eight_bit_image)
